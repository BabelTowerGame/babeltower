// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tob.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tob {

  /// <summary>Holder for reflection information generated from tob.proto</summary>
  public static partial class TobReflection {

    #region Descriptor
    /// <summary>File descriptor for tob.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TobReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgl0b2IucHJvdG8SA3RvYiIHCgVFbXB0eSI2ChFTZXJ2ZXJDaGFuZ2VFdmVu",
            "dBIQCghwcmV2aW91cxgBIAEoCRIPCgdjdXJyZW50GAIgASgJIj0KC1NlcnZl",
            "ckV2ZW50EgoKAmlkGAEgASgJEiIKBHR5cGUYAiABKA4yFC50b2IuU2VydmVy",
            "RXZlbnRUeXBlIikKBlZlY3RvchIJCgF4GAEgASgCEgkKAXkYAiABKAISCQoB",
            "ehgDIAEoAiJBCg9QbGF5ZXJNb3ZlRXZlbnQSDgoGbW92aW5nGAEgASgIEh4K",
            "CWRpcmVjdGlvbhgCIAEoCzILLnRvYi5WZWN0b3IiVAoPUGxheWVyQ2FzdEV2",
            "ZW50EgoKAmlkGAEgASgJEhAKCHRhcmdldElkGAIgASgJEiMKDnRhcmdldFBv",
            "c2l0aW9uGAMgASgLMgsudG9iLlZlY3RvciJQChBQbGF5ZXJBcHBlYXJhbmNl",
            "EgwKBG5hbWUYASABKAkSGwoGZ2VuZGVyGAIgASgOMgsudG9iLkdlbmRlchIR",
            "CgloYWlyQ29sb3IYAyABKAUiaQoNUGxheWVyRXF1aXBlZBIOCgZ3ZWFwb24Y",
            "ASABKAkSDAoEaGVhZBgCIAEoCRINCgVjaGVzdBgDIAEoCRIMCgRsZWdzGAQg",
            "ASgJEg0KBXNob2VzGAUgASgJEg4KBnNoaWVsZBgGIAEoCSKEAgoLUGxheWVy",
            "RXZlbnQSCgoCaWQYASABKAkSIgoEdHlwZRgCIAEoDjIULnRvYi5QbGF5ZXJF",
            "dmVudFR5cGUSIgoEbW92ZRgDIAEoCzIULnRvYi5QbGF5ZXJNb3ZlRXZlbnQS",
            "HQoIcG9zaXRpb24YBCABKAsyCy50b2IuVmVjdG9yEiIKBGNhc3QYBSABKAsy",
            "FC50b2IuUGxheWVyQ2FzdEV2ZW50Eg4KBmRhbWFnZRgGIAEoAhIpCgphcHBl",
            "YXJhbmNlGAcgASgLMhUudG9iLlBsYXllckFwcGVhcmFuY2USIwoHZXF1aXBl",
            "ZBgIIAEoCzISLnRvYi5QbGF5ZXJFcXVpcGVkIngKEU1vbnN0ZXJTcGF3bkV2",
            "ZW50EgoKAmlkGAEgASgJEhEKCWRlbW9uVHlwZRgCIAEoBRIRCglkZW1vblNr",
            "aW4YAyABKAUSEgoKd2VhcG9uVHlwZRgEIAEoBRIdCghwb3NpdGlvbhgFIAEo",
            "CzILLnRvYi5WZWN0b3IiTgoQTW9uc3Rlck1vdmVFdmVudBIdCghwb3NpdGlv",
            "bhgBIAEoCzILLnRvYi5WZWN0b3ISGwoGdGFyZ2V0GAIgASgLMgsudG9iLlZl",
            "Y3RvciJHChBNb25zdGVyTG9vdEV2ZW50EhAKCHBsYXllcklkGAEgASgJEg4K",
            "Bml0ZW1JZBgCIAEoCRIRCgltb25zdGVySWQYAyABKAkisAEKDE1vbnN0ZXJF",
            "dmVudBIKCgJpZBgBIAEoCRIjCgR0eXBlGAIgASgOMhUudG9iLk1vbnN0ZXJF",
            "dmVudFR5cGUSJQoFc3Bhd24YAyABKAsyFi50b2IuTW9uc3RlclNwYXduRXZl",
            "bnQSIwoEbG9vdBgEIAEoCzIVLnRvYi5Nb25zdGVyTG9vdEV2ZW50EiMKBG1v",
            "dmUYBSABKAsyFS50b2IuTW9uc3Rlck1vdmVFdmVudCJ/CgVFdmVudBIeCgV0",
            "b3BpYxgBIAEoDjIPLnRvYi5FdmVudFRvcGljEhsKAXMYAiABKAsyEC50b2Iu",
            "U2VydmVyRXZlbnQSGwoBcBgDIAEoCzIQLnRvYi5QbGF5ZXJFdmVudBIcCgFt",
            "GAQgASgLMhEudG9iLk1vbnN0ZXJFdmVudCpDCgpFdmVudFRvcGljEhAKDFNF",
            "UlZFUl9FVkVOVBAAEhAKDFBMQVlFUl9FVkVOVBABEhEKDU1PTlNURVJfRVZF",
            "TlQQAio2Cg9TZXJ2ZXJFdmVudFR5cGUSEQoNU0VSVkVSX0NIQU5HRRAAEhAK",
            "DFNFUlZFUl9ZSUVMRBABKsgBCg9QbGF5ZXJFdmVudFR5cGUSEAoMUExBWUVS",
            "X0VOVEVSEAASDwoLUExBWUVSX0VYSVQQARIPCgtQTEFZRVJfTU9WRRACEg8K",
            "C1BMQVlFUl9DQVNUEAMSEgoOUExBWUVSX0RBTUFHRUQQBBIOCgpQTEFZRVJf",
            "RElFEAUSDwoLUExBWUVSX0pVTVAQBhIRCg1QTEFZRVJfQ1JPVUNIEAcSEwoP",
            "UExBWUVSX1BPU0lUSU9OEAgSEwoPUExBWUVSX0VRVUlQUEVEEAkqHgoGR2Vu",
            "ZGVyEggKBE1BTEUQABIKCgZGRU1BTEUQASqcAQoQTW9uc3RlckV2ZW50VHlw",
            "ZRIRCg1NT05TVEVSX1NQQVdOEAASEAoMTU9OU1RFUl9NT1ZFEAESEgoOTU9O",
            "U1RFUl9BVFRBQ0sQAhIPCgtNT05TVEVSX0RJRRADEhMKD01PTlNURVJfREVT",
            "VFJPWRAEEhAKDE1PTlNURVJfTE9PVBAFEhcKE01PTlNURVJfTE9PVF9SRVNV",
            "TFQQBjJRCgNUb0ISJQoJU3Vic2NyaWJlEgoudG9iLkVtcHR5GgoudG9iLkV2",
            "ZW50MAESIwoHUHVibGlzaBIKLnRvYi5FdmVudBoKLnRvYi5FbXB0eSgBYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Tob.EventTopic), typeof(global::Tob.ServerEventType), typeof(global::Tob.PlayerEventType), typeof(global::Tob.Gender), typeof(global::Tob.MonsterEventType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tob.Empty), global::Tob.Empty.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tob.ServerChangeEvent), global::Tob.ServerChangeEvent.Parser, new[]{ "Previous", "Current" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tob.ServerEvent), global::Tob.ServerEvent.Parser, new[]{ "Id", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tob.Vector), global::Tob.Vector.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tob.PlayerMoveEvent), global::Tob.PlayerMoveEvent.Parser, new[]{ "Moving", "Direction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tob.PlayerCastEvent), global::Tob.PlayerCastEvent.Parser, new[]{ "Id", "TargetId", "TargetPosition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tob.PlayerAppearance), global::Tob.PlayerAppearance.Parser, new[]{ "Name", "Gender", "HairColor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tob.PlayerEquiped), global::Tob.PlayerEquiped.Parser, new[]{ "Weapon", "Head", "Chest", "Legs", "Shoes", "Shield" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tob.PlayerEvent), global::Tob.PlayerEvent.Parser, new[]{ "Id", "Type", "Move", "Position", "Cast", "Damage", "Appearance", "Equiped" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tob.MonsterSpawnEvent), global::Tob.MonsterSpawnEvent.Parser, new[]{ "Id", "DemonType", "DemonSkin", "WeaponType", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tob.MonsterMoveEvent), global::Tob.MonsterMoveEvent.Parser, new[]{ "Position", "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tob.MonsterLootEvent), global::Tob.MonsterLootEvent.Parser, new[]{ "PlayerId", "ItemId", "MonsterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tob.MonsterEvent), global::Tob.MonsterEvent.Parser, new[]{ "Id", "Type", "Spawn", "Loot", "Move" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tob.Event), global::Tob.Event.Parser, new[]{ "Topic", "S", "P", "M" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EventTopic {
    [pbr::OriginalName("SERVER_EVENT")] ServerEvent = 0,
    [pbr::OriginalName("PLAYER_EVENT")] PlayerEvent = 1,
    [pbr::OriginalName("MONSTER_EVENT")] MonsterEvent = 2,
  }

  public enum ServerEventType {
    [pbr::OriginalName("SERVER_CHANGE")] ServerChange = 0,
    [pbr::OriginalName("SERVER_YIELD")] ServerYield = 1,
  }

  public enum PlayerEventType {
    [pbr::OriginalName("PLAYER_ENTER")] PlayerEnter = 0,
    [pbr::OriginalName("PLAYER_EXIT")] PlayerExit = 1,
    /// <summary>
    /// Indicate the player is moving
    /// </summary>
    [pbr::OriginalName("PLAYER_MOVE")] PlayerMove = 2,
    [pbr::OriginalName("PLAYER_CAST")] PlayerCast = 3,
    [pbr::OriginalName("PLAYER_DAMAGED")] PlayerDamaged = 4,
    [pbr::OriginalName("PLAYER_DIE")] PlayerDie = 5,
    [pbr::OriginalName("PLAYER_JUMP")] PlayerJump = 6,
    [pbr::OriginalName("PLAYER_CROUCH")] PlayerCrouch = 7,
    /// <summary>
    /// Update the player position
    /// </summary>
    [pbr::OriginalName("PLAYER_POSITION")] PlayerPosition = 8,
    [pbr::OriginalName("PLAYER_EQUIPPED")] PlayerEquipped = 9,
  }

  public enum Gender {
    [pbr::OriginalName("MALE")] Male = 0,
    [pbr::OriginalName("FEMALE")] Female = 1,
  }

  public enum MonsterEventType {
    [pbr::OriginalName("MONSTER_SPAWN")] MonsterSpawn = 0,
    [pbr::OriginalName("MONSTER_MOVE")] MonsterMove = 1,
    [pbr::OriginalName("MONSTER_ATTACK")] MonsterAttack = 2,
    [pbr::OriginalName("MONSTER_DIE")] MonsterDie = 3,
    [pbr::OriginalName("MONSTER_DESTROY")] MonsterDestroy = 4,
    [pbr::OriginalName("MONSTER_LOOT")] MonsterLoot = 5,
    [pbr::OriginalName("MONSTER_LOOT_RESULT")] MonsterLootResult = 6,
  }

  #endregion

  #region Messages
  public sealed partial class Empty : pb::IMessage<Empty> {
    private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Empty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tob.TobReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty(Empty other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty Clone() {
      return new Empty(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Empty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Empty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Empty other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ServerChangeEvent : pb::IMessage<ServerChangeEvent> {
    private static readonly pb::MessageParser<ServerChangeEvent> _parser = new pb::MessageParser<ServerChangeEvent>(() => new ServerChangeEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerChangeEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tob.TobReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerChangeEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerChangeEvent(ServerChangeEvent other) : this() {
      previous_ = other.previous_;
      current_ = other.current_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerChangeEvent Clone() {
      return new ServerChangeEvent(this);
    }

    /// <summary>Field number for the "previous" field.</summary>
    public const int PreviousFieldNumber = 1;
    private string previous_ = "";
    /// <summary>
    /// previous server id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Previous {
      get { return previous_; }
      set {
        previous_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "current" field.</summary>
    public const int CurrentFieldNumber = 2;
    private string current_ = "";
    /// <summary>
    /// current server id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Current {
      get { return current_; }
      set {
        current_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerChangeEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerChangeEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Previous != other.Previous) return false;
      if (Current != other.Current) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Previous.Length != 0) hash ^= Previous.GetHashCode();
      if (Current.Length != 0) hash ^= Current.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Previous.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Previous);
      }
      if (Current.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Current);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Previous.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Previous);
      }
      if (Current.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Current);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerChangeEvent other) {
      if (other == null) {
        return;
      }
      if (other.Previous.Length != 0) {
        Previous = other.Previous;
      }
      if (other.Current.Length != 0) {
        Current = other.Current;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Previous = input.ReadString();
            break;
          }
          case 18: {
            Current = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerEvent : pb::IMessage<ServerEvent> {
    private static readonly pb::MessageParser<ServerEvent> _parser = new pb::MessageParser<ServerEvent>(() => new ServerEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tob.TobReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerEvent(ServerEvent other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerEvent Clone() {
      return new ServerEvent(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Tob.ServerEventType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tob.ServerEventType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerEvent other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::Tob.ServerEventType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector : pb::IMessage<Vector> {
    private static readonly pb::MessageParser<Vector> _parser = new pb::MessageParser<Vector>(() => new Vector());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tob.TobReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector(Vector other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector Clone() {
      return new Vector(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerMoveEvent : pb::IMessage<PlayerMoveEvent> {
    private static readonly pb::MessageParser<PlayerMoveEvent> _parser = new pb::MessageParser<PlayerMoveEvent>(() => new PlayerMoveEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerMoveEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tob.TobReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMoveEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMoveEvent(PlayerMoveEvent other) : this() {
      moving_ = other.moving_;
      Direction = other.direction_ != null ? other.Direction.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMoveEvent Clone() {
      return new PlayerMoveEvent(this);
    }

    /// <summary>Field number for the "moving" field.</summary>
    public const int MovingFieldNumber = 1;
    private bool moving_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Moving {
      get { return moving_; }
      set {
        moving_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 2;
    private global::Tob.Vector direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tob.Vector Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerMoveEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerMoveEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Moving != other.Moving) return false;
      if (!object.Equals(Direction, other.Direction)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Moving != false) hash ^= Moving.GetHashCode();
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Moving != false) {
        output.WriteRawTag(8);
        output.WriteBool(Moving);
      }
      if (direction_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Direction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Moving != false) {
        size += 1 + 1;
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerMoveEvent other) {
      if (other == null) {
        return;
      }
      if (other.Moving != false) {
        Moving = other.Moving;
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          direction_ = new global::Tob.Vector();
        }
        Direction.MergeFrom(other.Direction);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Moving = input.ReadBool();
            break;
          }
          case 18: {
            if (direction_ == null) {
              direction_ = new global::Tob.Vector();
            }
            input.ReadMessage(direction_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerCastEvent : pb::IMessage<PlayerCastEvent> {
    private static readonly pb::MessageParser<PlayerCastEvent> _parser = new pb::MessageParser<PlayerCastEvent>(() => new PlayerCastEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerCastEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tob.TobReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCastEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCastEvent(PlayerCastEvent other) : this() {
      id_ = other.id_;
      targetId_ = other.targetId_;
      TargetPosition = other.targetPosition_ != null ? other.TargetPosition.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCastEvent Clone() {
      return new PlayerCastEvent(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private string targetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetId {
      get { return targetId_; }
      set {
        targetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targetPosition" field.</summary>
    public const int TargetPositionFieldNumber = 3;
    private global::Tob.Vector targetPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tob.Vector TargetPosition {
      get { return targetPosition_; }
      set {
        targetPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerCastEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerCastEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TargetId != other.TargetId) return false;
      if (!object.Equals(TargetPosition, other.TargetPosition)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (TargetId.Length != 0) hash ^= TargetId.GetHashCode();
      if (targetPosition_ != null) hash ^= TargetPosition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (TargetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TargetId);
      }
      if (targetPosition_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TargetPosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (TargetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetId);
      }
      if (targetPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetPosition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerCastEvent other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.TargetId.Length != 0) {
        TargetId = other.TargetId;
      }
      if (other.targetPosition_ != null) {
        if (targetPosition_ == null) {
          targetPosition_ = new global::Tob.Vector();
        }
        TargetPosition.MergeFrom(other.TargetPosition);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            TargetId = input.ReadString();
            break;
          }
          case 26: {
            if (targetPosition_ == null) {
              targetPosition_ = new global::Tob.Vector();
            }
            input.ReadMessage(targetPosition_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerAppearance : pb::IMessage<PlayerAppearance> {
    private static readonly pb::MessageParser<PlayerAppearance> _parser = new pb::MessageParser<PlayerAppearance>(() => new PlayerAppearance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerAppearance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tob.TobReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAppearance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAppearance(PlayerAppearance other) : this() {
      name_ = other.name_;
      gender_ = other.gender_;
      hairColor_ = other.hairColor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAppearance Clone() {
      return new PlayerAppearance(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 2;
    private global::Tob.Gender gender_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tob.Gender Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "hairColor" field.</summary>
    public const int HairColorFieldNumber = 3;
    private int hairColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HairColor {
      get { return hairColor_; }
      set {
        hairColor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerAppearance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerAppearance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Gender != other.Gender) return false;
      if (HairColor != other.HairColor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (HairColor != 0) hash ^= HairColor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Gender != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Gender);
      }
      if (HairColor != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HairColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Gender);
      }
      if (HairColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HairColor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerAppearance other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      if (other.HairColor != 0) {
        HairColor = other.HairColor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            gender_ = (global::Tob.Gender) input.ReadEnum();
            break;
          }
          case 24: {
            HairColor = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerEquiped : pb::IMessage<PlayerEquiped> {
    private static readonly pb::MessageParser<PlayerEquiped> _parser = new pb::MessageParser<PlayerEquiped>(() => new PlayerEquiped());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerEquiped> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tob.TobReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEquiped() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEquiped(PlayerEquiped other) : this() {
      weapon_ = other.weapon_;
      head_ = other.head_;
      chest_ = other.chest_;
      legs_ = other.legs_;
      shoes_ = other.shoes_;
      shield_ = other.shield_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEquiped Clone() {
      return new PlayerEquiped(this);
    }

    /// <summary>Field number for the "weapon" field.</summary>
    public const int WeaponFieldNumber = 1;
    private string weapon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Weapon {
      get { return weapon_; }
      set {
        weapon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "head" field.</summary>
    public const int HeadFieldNumber = 2;
    private string head_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Head {
      get { return head_; }
      set {
        head_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chest" field.</summary>
    public const int ChestFieldNumber = 3;
    private string chest_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Chest {
      get { return chest_; }
      set {
        chest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "legs" field.</summary>
    public const int LegsFieldNumber = 4;
    private string legs_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Legs {
      get { return legs_; }
      set {
        legs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shoes" field.</summary>
    public const int ShoesFieldNumber = 5;
    private string shoes_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Shoes {
      get { return shoes_; }
      set {
        shoes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shield" field.</summary>
    public const int ShieldFieldNumber = 6;
    private string shield_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Shield {
      get { return shield_; }
      set {
        shield_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerEquiped);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerEquiped other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Weapon != other.Weapon) return false;
      if (Head != other.Head) return false;
      if (Chest != other.Chest) return false;
      if (Legs != other.Legs) return false;
      if (Shoes != other.Shoes) return false;
      if (Shield != other.Shield) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Weapon.Length != 0) hash ^= Weapon.GetHashCode();
      if (Head.Length != 0) hash ^= Head.GetHashCode();
      if (Chest.Length != 0) hash ^= Chest.GetHashCode();
      if (Legs.Length != 0) hash ^= Legs.GetHashCode();
      if (Shoes.Length != 0) hash ^= Shoes.GetHashCode();
      if (Shield.Length != 0) hash ^= Shield.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Weapon.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Weapon);
      }
      if (Head.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Head);
      }
      if (Chest.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Chest);
      }
      if (Legs.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Legs);
      }
      if (Shoes.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Shoes);
      }
      if (Shield.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Shield);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Weapon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Weapon);
      }
      if (Head.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Head);
      }
      if (Chest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Chest);
      }
      if (Legs.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Legs);
      }
      if (Shoes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Shoes);
      }
      if (Shield.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Shield);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerEquiped other) {
      if (other == null) {
        return;
      }
      if (other.Weapon.Length != 0) {
        Weapon = other.Weapon;
      }
      if (other.Head.Length != 0) {
        Head = other.Head;
      }
      if (other.Chest.Length != 0) {
        Chest = other.Chest;
      }
      if (other.Legs.Length != 0) {
        Legs = other.Legs;
      }
      if (other.Shoes.Length != 0) {
        Shoes = other.Shoes;
      }
      if (other.Shield.Length != 0) {
        Shield = other.Shield;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Weapon = input.ReadString();
            break;
          }
          case 18: {
            Head = input.ReadString();
            break;
          }
          case 26: {
            Chest = input.ReadString();
            break;
          }
          case 34: {
            Legs = input.ReadString();
            break;
          }
          case 42: {
            Shoes = input.ReadString();
            break;
          }
          case 50: {
            Shield = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerEvent : pb::IMessage<PlayerEvent> {
    private static readonly pb::MessageParser<PlayerEvent> _parser = new pb::MessageParser<PlayerEvent>(() => new PlayerEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tob.TobReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEvent(PlayerEvent other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      Move = other.move_ != null ? other.Move.Clone() : null;
      Position = other.position_ != null ? other.Position.Clone() : null;
      Cast = other.cast_ != null ? other.Cast.Clone() : null;
      damage_ = other.damage_;
      Appearance = other.appearance_ != null ? other.Appearance.Clone() : null;
      Equiped = other.equiped_ != null ? other.Equiped.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEvent Clone() {
      return new PlayerEvent(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Tob.PlayerEventType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tob.PlayerEventType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "move" field.</summary>
    public const int MoveFieldNumber = 3;
    private global::Tob.PlayerMoveEvent move_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tob.PlayerMoveEvent Move {
      get { return move_; }
      set {
        move_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 4;
    private global::Tob.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tob.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "cast" field.</summary>
    public const int CastFieldNumber = 5;
    private global::Tob.PlayerCastEvent cast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tob.PlayerCastEvent Cast {
      get { return cast_; }
      set {
        cast_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 6;
    private float damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "appearance" field.</summary>
    public const int AppearanceFieldNumber = 7;
    private global::Tob.PlayerAppearance appearance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tob.PlayerAppearance Appearance {
      get { return appearance_; }
      set {
        appearance_ = value;
      }
    }

    /// <summary>Field number for the "equiped" field.</summary>
    public const int EquipedFieldNumber = 8;
    private global::Tob.PlayerEquiped equiped_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tob.PlayerEquiped Equiped {
      get { return equiped_; }
      set {
        equiped_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Move, other.Move)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Cast, other.Cast)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Damage, other.Damage)) return false;
      if (!object.Equals(Appearance, other.Appearance)) return false;
      if (!object.Equals(Equiped, other.Equiped)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (move_ != null) hash ^= Move.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (cast_ != null) hash ^= Cast.GetHashCode();
      if (Damage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Damage);
      if (appearance_ != null) hash ^= Appearance.GetHashCode();
      if (equiped_ != null) hash ^= Equiped.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (move_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Move);
      }
      if (position_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if (cast_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Cast);
      }
      if (Damage != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Damage);
      }
      if (appearance_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Appearance);
      }
      if (equiped_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Equiped);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (move_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Move);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (cast_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cast);
      }
      if (Damage != 0F) {
        size += 1 + 4;
      }
      if (appearance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Appearance);
      }
      if (equiped_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equiped);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerEvent other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.move_ != null) {
        if (move_ == null) {
          move_ = new global::Tob.PlayerMoveEvent();
        }
        Move.MergeFrom(other.Move);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Tob.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.cast_ != null) {
        if (cast_ == null) {
          cast_ = new global::Tob.PlayerCastEvent();
        }
        Cast.MergeFrom(other.Cast);
      }
      if (other.Damage != 0F) {
        Damage = other.Damage;
      }
      if (other.appearance_ != null) {
        if (appearance_ == null) {
          appearance_ = new global::Tob.PlayerAppearance();
        }
        Appearance.MergeFrom(other.Appearance);
      }
      if (other.equiped_ != null) {
        if (equiped_ == null) {
          equiped_ = new global::Tob.PlayerEquiped();
        }
        Equiped.MergeFrom(other.Equiped);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::Tob.PlayerEventType) input.ReadEnum();
            break;
          }
          case 26: {
            if (move_ == null) {
              move_ = new global::Tob.PlayerMoveEvent();
            }
            input.ReadMessage(move_);
            break;
          }
          case 34: {
            if (position_ == null) {
              position_ = new global::Tob.Vector();
            }
            input.ReadMessage(position_);
            break;
          }
          case 42: {
            if (cast_ == null) {
              cast_ = new global::Tob.PlayerCastEvent();
            }
            input.ReadMessage(cast_);
            break;
          }
          case 53: {
            Damage = input.ReadFloat();
            break;
          }
          case 58: {
            if (appearance_ == null) {
              appearance_ = new global::Tob.PlayerAppearance();
            }
            input.ReadMessage(appearance_);
            break;
          }
          case 66: {
            if (equiped_ == null) {
              equiped_ = new global::Tob.PlayerEquiped();
            }
            input.ReadMessage(equiped_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonsterSpawnEvent : pb::IMessage<MonsterSpawnEvent> {
    private static readonly pb::MessageParser<MonsterSpawnEvent> _parser = new pb::MessageParser<MonsterSpawnEvent>(() => new MonsterSpawnEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterSpawnEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tob.TobReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterSpawnEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterSpawnEvent(MonsterSpawnEvent other) : this() {
      id_ = other.id_;
      demonType_ = other.demonType_;
      demonSkin_ = other.demonSkin_;
      weaponType_ = other.weaponType_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterSpawnEvent Clone() {
      return new MonsterSpawnEvent(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "demonType" field.</summary>
    public const int DemonTypeFieldNumber = 2;
    private int demonType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DemonType {
      get { return demonType_; }
      set {
        demonType_ = value;
      }
    }

    /// <summary>Field number for the "demonSkin" field.</summary>
    public const int DemonSkinFieldNumber = 3;
    private int demonSkin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DemonSkin {
      get { return demonSkin_; }
      set {
        demonSkin_ = value;
      }
    }

    /// <summary>Field number for the "weaponType" field.</summary>
    public const int WeaponTypeFieldNumber = 4;
    private int weaponType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponType {
      get { return weaponType_; }
      set {
        weaponType_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 5;
    private global::Tob.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tob.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterSpawnEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterSpawnEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (DemonType != other.DemonType) return false;
      if (DemonSkin != other.DemonSkin) return false;
      if (WeaponType != other.WeaponType) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (DemonType != 0) hash ^= DemonType.GetHashCode();
      if (DemonSkin != 0) hash ^= DemonSkin.GetHashCode();
      if (WeaponType != 0) hash ^= WeaponType.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (DemonType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DemonType);
      }
      if (DemonSkin != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DemonSkin);
      }
      if (WeaponType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WeaponType);
      }
      if (position_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (DemonType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DemonType);
      }
      if (DemonSkin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DemonSkin);
      }
      if (WeaponType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeaponType);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterSpawnEvent other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.DemonType != 0) {
        DemonType = other.DemonType;
      }
      if (other.DemonSkin != 0) {
        DemonSkin = other.DemonSkin;
      }
      if (other.WeaponType != 0) {
        WeaponType = other.WeaponType;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Tob.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            DemonType = input.ReadInt32();
            break;
          }
          case 24: {
            DemonSkin = input.ReadInt32();
            break;
          }
          case 32: {
            WeaponType = input.ReadInt32();
            break;
          }
          case 42: {
            if (position_ == null) {
              position_ = new global::Tob.Vector();
            }
            input.ReadMessage(position_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonsterMoveEvent : pb::IMessage<MonsterMoveEvent> {
    private static readonly pb::MessageParser<MonsterMoveEvent> _parser = new pb::MessageParser<MonsterMoveEvent>(() => new MonsterMoveEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterMoveEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tob.TobReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterMoveEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterMoveEvent(MonsterMoveEvent other) : this() {
      Position = other.position_ != null ? other.Position.Clone() : null;
      Target = other.target_ != null ? other.Target.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterMoveEvent Clone() {
      return new MonsterMoveEvent(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Tob.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tob.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 2;
    private global::Tob.Vector target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tob.Vector Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterMoveEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterMoveEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Target, other.Target)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (target_ != null) hash ^= Target.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (target_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterMoveEvent other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Tob.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.target_ != null) {
        if (target_ == null) {
          target_ = new global::Tob.Vector();
        }
        Target.MergeFrom(other.Target);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              position_ = new global::Tob.Vector();
            }
            input.ReadMessage(position_);
            break;
          }
          case 18: {
            if (target_ == null) {
              target_ = new global::Tob.Vector();
            }
            input.ReadMessage(target_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonsterLootEvent : pb::IMessage<MonsterLootEvent> {
    private static readonly pb::MessageParser<MonsterLootEvent> _parser = new pb::MessageParser<MonsterLootEvent>(() => new MonsterLootEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterLootEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tob.TobReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterLootEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterLootEvent(MonsterLootEvent other) : this() {
      playerId_ = other.playerId_;
      itemId_ = other.itemId_;
      monsterId_ = other.monsterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterLootEvent Clone() {
      return new MonsterLootEvent(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private string itemId_ = "";
    /// <summary>
    /// item type id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "monsterId" field.</summary>
    public const int MonsterIdFieldNumber = 3;
    private string monsterId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterLootEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterLootEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (ItemId != other.ItemId) return false;
      if (MonsterId != other.MonsterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (ItemId.Length != 0) hash ^= ItemId.GetHashCode();
      if (MonsterId.Length != 0) hash ^= MonsterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (ItemId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ItemId);
      }
      if (MonsterId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MonsterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (ItemId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (MonsterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MonsterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterLootEvent other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.ItemId.Length != 0) {
        ItemId = other.ItemId;
      }
      if (other.MonsterId.Length != 0) {
        MonsterId = other.MonsterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 18: {
            ItemId = input.ReadString();
            break;
          }
          case 26: {
            MonsterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonsterEvent : pb::IMessage<MonsterEvent> {
    private static readonly pb::MessageParser<MonsterEvent> _parser = new pb::MessageParser<MonsterEvent>(() => new MonsterEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tob.TobReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterEvent(MonsterEvent other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      Spawn = other.spawn_ != null ? other.Spawn.Clone() : null;
      Loot = other.loot_ != null ? other.Loot.Clone() : null;
      Move = other.move_ != null ? other.Move.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterEvent Clone() {
      return new MonsterEvent(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Tob.MonsterEventType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tob.MonsterEventType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "spawn" field.</summary>
    public const int SpawnFieldNumber = 3;
    private global::Tob.MonsterSpawnEvent spawn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tob.MonsterSpawnEvent Spawn {
      get { return spawn_; }
      set {
        spawn_ = value;
      }
    }

    /// <summary>Field number for the "loot" field.</summary>
    public const int LootFieldNumber = 4;
    private global::Tob.MonsterLootEvent loot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tob.MonsterLootEvent Loot {
      get { return loot_; }
      set {
        loot_ = value;
      }
    }

    /// <summary>Field number for the "move" field.</summary>
    public const int MoveFieldNumber = 5;
    private global::Tob.MonsterMoveEvent move_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tob.MonsterMoveEvent Move {
      get { return move_; }
      set {
        move_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Spawn, other.Spawn)) return false;
      if (!object.Equals(Loot, other.Loot)) return false;
      if (!object.Equals(Move, other.Move)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (spawn_ != null) hash ^= Spawn.GetHashCode();
      if (loot_ != null) hash ^= Loot.GetHashCode();
      if (move_ != null) hash ^= Move.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (spawn_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Spawn);
      }
      if (loot_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Loot);
      }
      if (move_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Move);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (spawn_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spawn);
      }
      if (loot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Loot);
      }
      if (move_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Move);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterEvent other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.spawn_ != null) {
        if (spawn_ == null) {
          spawn_ = new global::Tob.MonsterSpawnEvent();
        }
        Spawn.MergeFrom(other.Spawn);
      }
      if (other.loot_ != null) {
        if (loot_ == null) {
          loot_ = new global::Tob.MonsterLootEvent();
        }
        Loot.MergeFrom(other.Loot);
      }
      if (other.move_ != null) {
        if (move_ == null) {
          move_ = new global::Tob.MonsterMoveEvent();
        }
        Move.MergeFrom(other.Move);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::Tob.MonsterEventType) input.ReadEnum();
            break;
          }
          case 26: {
            if (spawn_ == null) {
              spawn_ = new global::Tob.MonsterSpawnEvent();
            }
            input.ReadMessage(spawn_);
            break;
          }
          case 34: {
            if (loot_ == null) {
              loot_ = new global::Tob.MonsterLootEvent();
            }
            input.ReadMessage(loot_);
            break;
          }
          case 42: {
            if (move_ == null) {
              move_ = new global::Tob.MonsterMoveEvent();
            }
            input.ReadMessage(move_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Event : pb::IMessage<Event> {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tob.TobReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event(Event other) : this() {
      topic_ = other.topic_;
      S = other.s_ != null ? other.S.Clone() : null;
      P = other.p_ != null ? other.P.Clone() : null;
      M = other.m_ != null ? other.M.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private global::Tob.EventTopic topic_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tob.EventTopic Topic {
      get { return topic_; }
      set {
        topic_ = value;
      }
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 2;
    private global::Tob.ServerEvent s_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tob.ServerEvent S {
      get { return s_; }
      set {
        s_ = value;
      }
    }

    /// <summary>Field number for the "p" field.</summary>
    public const int PFieldNumber = 3;
    private global::Tob.PlayerEvent p_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tob.PlayerEvent P {
      get { return p_; }
      set {
        p_ = value;
      }
    }

    /// <summary>Field number for the "m" field.</summary>
    public const int MFieldNumber = 4;
    private global::Tob.MonsterEvent m_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tob.MonsterEvent M {
      get { return m_; }
      set {
        m_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Topic != other.Topic) return false;
      if (!object.Equals(S, other.S)) return false;
      if (!object.Equals(P, other.P)) return false;
      if (!object.Equals(M, other.M)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Topic != 0) hash ^= Topic.GetHashCode();
      if (s_ != null) hash ^= S.GetHashCode();
      if (p_ != null) hash ^= P.GetHashCode();
      if (m_ != null) hash ^= M.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Topic != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Topic);
      }
      if (s_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(S);
      }
      if (p_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(P);
      }
      if (m_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(M);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Topic != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Topic);
      }
      if (s_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(S);
      }
      if (p_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(P);
      }
      if (m_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(M);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      if (other.Topic != 0) {
        Topic = other.Topic;
      }
      if (other.s_ != null) {
        if (s_ == null) {
          s_ = new global::Tob.ServerEvent();
        }
        S.MergeFrom(other.S);
      }
      if (other.p_ != null) {
        if (p_ == null) {
          p_ = new global::Tob.PlayerEvent();
        }
        P.MergeFrom(other.P);
      }
      if (other.m_ != null) {
        if (m_ == null) {
          m_ = new global::Tob.MonsterEvent();
        }
        M.MergeFrom(other.M);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            topic_ = (global::Tob.EventTopic) input.ReadEnum();
            break;
          }
          case 18: {
            if (s_ == null) {
              s_ = new global::Tob.ServerEvent();
            }
            input.ReadMessage(s_);
            break;
          }
          case 26: {
            if (p_ == null) {
              p_ = new global::Tob.PlayerEvent();
            }
            input.ReadMessage(p_);
            break;
          }
          case 34: {
            if (m_ == null) {
              m_ = new global::Tob.MonsterEvent();
            }
            input.ReadMessage(m_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
