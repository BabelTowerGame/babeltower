// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tob.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Tob {
  public static partial class ToB
  {
    static readonly string __ServiceName = "tob.ToB";

    static readonly grpc::Marshaller<global::Tob.NodeInfo> __Marshaller_NodeInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tob.NodeInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tob.Event> __Marshaller_Event = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tob.Event.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tob.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tob.Empty.Parser.ParseFrom);

    static readonly grpc::Method<global::Tob.NodeInfo, global::Tob.Event> __Method_Subscribe = new grpc::Method<global::Tob.NodeInfo, global::Tob.Event>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Subscribe",
        __Marshaller_NodeInfo,
        __Marshaller_Event);

    static readonly grpc::Method<global::Tob.Event, global::Tob.Empty> __Method_Publish = new grpc::Method<global::Tob.Event, global::Tob.Empty>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "Publish",
        __Marshaller_Event,
        __Marshaller_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tob.TobReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ToB</summary>
    public abstract partial class ToBBase
    {
      public virtual global::System.Threading.Tasks.Task Subscribe(global::Tob.NodeInfo request, grpc::IServerStreamWriter<global::Tob.Event> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tob.Empty> Publish(grpc::IAsyncStreamReader<global::Tob.Event> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ToB</summary>
    public partial class ToBClient : grpc::ClientBase<ToBClient>
    {
      /// <summary>Creates a new client for ToB</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ToBClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ToB that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ToBClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ToBClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ToBClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::Tob.Event> Subscribe(global::Tob.NodeInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Subscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Tob.Event> Subscribe(global::Tob.NodeInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Subscribe, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Tob.Event, global::Tob.Empty> Publish(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Publish(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Tob.Event, global::Tob.Empty> Publish(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_Publish, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ToBClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ToBClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ToBBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Subscribe, serviceImpl.Subscribe)
          .AddMethod(__Method_Publish, serviceImpl.Publish).Build();
    }

  }
}
#endregion
